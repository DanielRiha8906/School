############################
library(forecast)
library(dynlm)
options(repos = c(CRAN = "https://cloud.r-project.org/"))
options(repos = c(CRAN = "https://cloud.r-project.org/"))
install.packages(dynlm)
install.packages('dynlm)
''
'
install.packages('dynlm')
sudo pacman -S cmake
install.packages("dynlm", dependencies = TRUE)
############################
library(forecast)
library(dynlm)
library(lmtest)
############################
### prozkoumejme vzajemne vztahy mezi radami souboru airquality
# kroskorelacni funkce
ccf(ts(airquality$Wind),ts(airquality$Solar.R),na.action = na.pass)
# nejsou zavisle
ccf(ts(airquality$Wind),ts(airquality$Ozone),na.action = na.pass)
# generovani dat
set.seed(999)
x_series <- arima.sim(n = 200, list(order = c(1,0,0), ar = 0.7, sd=1))
# nasimulovany AR(1) proces
z <- ts.intersect(stats::lag(x_series, -1), stats::lag(x_series, -2))
# hodnoty rady x_series v case t a t-1
y_series <- 15 + 0.8*z[,1] + 1.5*z[,2] + rnorm(199,0,1)
# kombinace aktualni a zpozdene hodnoty + nahodne chyby
xy_series <- ts.intersect(y_series, z)
# model pomoci bezne linearni regrese
lm1 <- lm(xy_series[,1] ~ xy_series[,2] + xy_series[,3])
summary(lm1)
View(lm1)
checkresiduals(lm1)
# model pomoci dynamickeho modelovani
dlm1 <- dynlm(y_series ~ L(x_series, 1) + L(x_series, 2))
summary(dlm1)
### pouziti dynamickeho modelovani k odhaleni trendu a sezonnosti
plot(AirPassengers)
# multiplikativni rada, udelam z ni logaritmus
ap <- log(AirPassengers)
plot(ap)
# pridam zavislost na tretim pozorovani dozadu
set.seed(123)
ap_x <- 2 * stats::lag(ap, -3) + rnorm(length(ap), 0, 0.2)
# dynamicky linearni model
dlm2 <- dynlm(ap ~ trend(ap) + season(ap) + L(ap_x, 3))
summary(dlm2)
dlm2.o <- ts.intersect(ap, dlm2$fitted.values)
plot.ts(dlm2.o, plot.type = "single", col=c("orange","blue"),
lty=c(1,4), lwd=c(1,1),
main = "Dynamic Linear Model - Original (orange) and Fitted series (blue)")
# model vypada hezky, jeste zkontrolujem residua
checkresiduals(dlm2)
set.seed(999)
x2_series <- arima.sim(n = 200, list(order = c(1,0,0), ar = 0.7, sd=1))
z2 <- ts.intersect(x2_series, stats::lag(x2_series, -3), stats::lag(x2_series, -4))
y2_series <- 15 + 0.8*z2[,2] + 1.5*z2[,3]
y2_errors <- arima.sim(n = 196, list(order = c(1,0,1), ar = 0.6, ma = 0.6), sd=1)
y2_series <- y2_series + y2_errors
plot(y2_series)
# chceme modelovat zavislost y2 na x2
# nejprve hledame, zda je zavislost v case t nebo se zpozdenim
ccf(x2_series,y2_series)
which.max(ccf(x2_series,y2_series,plot=F)$acf)
# maximalni korelace na 16 pozici
ccf(x2_series,y2_series,plot=F)$lag[16]
# dynamicky model
dlm3 <- dynlm(y2_series ~ L(x2_series, 3) + L(x2_series, 4))
summary(dlm3)
# vyznamnost koeficientu
lm3d <- ts.intersect(y2_series, dlm3$fitted.values)
plot.ts(lm3d, plot.type = "single", col=c("orange","blue"),
lty=c(1,4), lwd=c(1,1),
main = "'Classic' Linear Model - Original (orange) and Fitted series (blue)")
# jak model sedi na data
# kontrola residui
checkresiduals(lm2)
# jak model sedi na data
# kontrola residui
checkresiduals(lm3)
# jak model sedi na data
# kontrola residui
checkresiduals(lm3d)
# jak model sedi na data
# kontrola residui
checkresiduals(dlm3)
# do modelu pridame autokorelovana residua
x2Lagged <- cbind(
xLag0 = x2_series,
xLag3 = stats::lag(x2_series,-3),
xLag4 = stats::lag(x2_series,-4))
xy2_series <- ts.union(y2_series, x2Lagged)
# do prikazu auto.arima muzeme pridat i matici regresoru
arima1 <- auto.arima(xy2_series[,1], xreg = xy2_series[,3:4])
arima1
# jak vypadaji residua tohoto modelu
checkresiduals(arima1)
BIC(dlm3)
# zakresleni modelu do dat
arima1d <- ts.intersect(na.omit(xy2_series[,1]), arima1$fitted)
plot.ts(arima1d, plot.type = "single", col=c("orange","blue"),
lty=c(1,4), lwd=c(1,1),
main = "ARIMA errors model - Original (orange) and Fitted series (blue)")
# vyznamnost koeficientu ARIMA modelu
coeftest(arima1)
# najdete optimalni model pro radu co2
rada <- co2
# najdete optimalni model pro radu co2
rada <- co2
View(rada)
plot(rada)
find_best_arima <- function(data) {
# Define a list of ARIMA model specifications
arima_specs <- list(
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(0, 0, 0), seasonal = list(order = c(0, 1, 0))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(1, 0, 0), seasonal = list(order = c(0, 1, 0))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(0, 0, 1), seasonal = list(order = c(0, 1, 0))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(1, 0, 1), seasonal = list(order = c(0, 1, 0))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(0, 0, 0), seasonal = list(order = c(1, 1, 0))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(1, 0, 0), seasonal = list(order = c(1, 1, 0))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(0, 0, 1), seasonal = list(order = c(1, 1, 0))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(1, 0, 1), seasonal = list(order = c(1, 1, 0))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(0, 0, 0), seasonal = list(order = c(0, 1, 1))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(1, 0, 0), seasonal = list(order = c(0, 1, 1))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(0, 0, 1), seasonal = list(order = c(0, 1, 1))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(1, 0, 1), seasonal = list(order = c(0, 1, 1))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(0, 0, 0), seasonal = list(order = c(1, 1, 1))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(1, 0, 0), seasonal = list(order = c(1, 1, 1))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(0, 0, 1), seasonal = list(order = c(1, 1, 1))),
list(name = "ARIMA(1,0,0)(0,1,0)", order = c(1, 0, 1), seasonal = list(order = c(1, 1, 1))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(0, 0, 0), seasonal = list(order = c(0, 0, 0))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(1, 0, 0), seasonal = list(order = c(0, 0, 0))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(0, 0, 1), seasonal = list(order = c(0, 0, 0))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(1, 0, 1), seasonal = list(order = c(0, 0, 0))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(0, 0, 0), seasonal = list(order = c(1, 0, 0))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(1, 0, 0), seasonal = list(order = c(1, 0, 0))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(0, 0, 1), seasonal = list(order = c(1, 0, 0))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(1, 0, 1), seasonal = list(order = c(1, 0, 0))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(0, 0, 0), seasonal = list(order = c(0, 0, 1))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(1, 0, 0), seasonal = list(order = c(0, 0, 1))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(0, 0, 1), seasonal = list(order = c(0, 0, 1))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(1, 0, 1), seasonal = list(order = c(0, 0, 1))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(0, 0, 0), seasonal = list(order = c(1, 0, 1))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(1, 0, 0), seasonal = list(order = c(1, 0, 1))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(0, 0, 1), seasonal = list(order = c(1, 0, 1))),
list(name = "ARIMA(1,0,0)(0,0,0)", order = c(1, 0, 1), seasonal = list(order = c(1, 0, 1))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(0, 1, 0), seasonal = list(order = c(0, 1, 0))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(1, 1, 0), seasonal = list(order = c(0, 1, 0))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(0, 1, 1), seasonal = list(order = c(0, 1, 0))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(1, 1, 1), seasonal = list(order = c(0, 1, 0))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(0, 1, 0), seasonal = list(order = c(1, 1, 0))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(1, 1, 0), seasonal = list(order = c(1, 1, 0))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(0, 1, 1), seasonal = list(order = c(1, 1, 0))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(1, 1, 1), seasonal = list(order = c(1, 1, 0))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(0, 1, 0), seasonal = list(order = c(0, 1, 1))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(1, 1, 0), seasonal = list(order = c(0, 1, 1))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(0, 1, 1), seasonal = list(order = c(0, 1, 1))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(1, 1, 1), seasonal = list(order = c(0, 1, 1))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(0, 1, 0), seasonal = list(order = c(1, 1, 1))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(1, 1, 0), seasonal = list(order = c(1, 1, 1))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(0, 1, 1), seasonal = list(order = c(1, 1, 1))),
list(name = "ARIMA(1,1,0)(0,1,0)", order = c(1, 1, 1), seasonal = list(order = c(1, 1, 1))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(0, 1, 0), seasonal = list(order = c(0, 0, 0))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(1, 1, 0), seasonal = list(order = c(0, 0, 0))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(0, 1, 1), seasonal = list(order = c(0, 0, 0))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(1, 1, 1), seasonal = list(order = c(0, 0, 0))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(0, 1, 0), seasonal = list(order = c(1, 0, 0))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(1, 1, 0), seasonal = list(order = c(1, 0, 0))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(0, 1, 1), seasonal = list(order = c(1, 0, 0))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(1, 1, 1), seasonal = list(order = c(1, 0, 0))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(0, 1, 0), seasonal = list(order = c(0, 0, 1))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(1, 1, 0), seasonal = list(order = c(0, 0, 1))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(0, 1, 1), seasonal = list(order = c(0, 0, 1))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(1, 1, 1), seasonal = list(order = c(0, 0, 1))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(0, 1, 0), seasonal = list(order = c(1, 0, 1))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(1, 1, 0), seasonal = list(order = c(1, 0, 1))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(0, 1, 1), seasonal = list(order = c(1, 0, 1))),
list(name = "ARIMA(1,1,0)(0,0,0)", order = c(1, 1, 1), seasonal = list(order = c(1, 0, 1)))
)
# Initialize variables to track best model and minimum BIC
best_model <- NULL
best_spec <- NULL
best_bic <- Inf
# Iterate over each ARIMA model specification
for (i in seq_along(arima_specs)) {
spec <- arima_specs[[i]]
# Fit the ARIMA model
fit <- tryCatch(
arima(data, order = spec$order, seasonal = spec$seasonal),
error = function(e) NULL  # Handle errors gracefully
)
# Calculate BIC and update best model if BIC is lower
if (!is.null(fit)) {
bic <- BIC(fit)
if (bic < best_bic) {
best_bic <- bic
best_model <- fit
best_spec <- spec$name  # Track the winning model specification
}
}
}
# Return the best model, selected ARIMA model specification, and BIC value
return(list(best_model = best_model, best_spec = best_spec, best_bic = best_bic))
}
result <- find_best_arima(rada)
print(result$best_spec)
print(result$best_model)
print(result$best_bic)
result <- find_best_arima(rada)
print(result$best_spec)
print(result$best_model)
print(result$best_bic)
model <- arima(your_data, order = c(1, 1, 0), seasonal = c(0, 1, 0))
summary(model)
model <- arima(rada, order = c(1, 1, 0), seasonal = c(0, 1, 0))
summary(model)
library(devtools)
install.packages('usethis')
for.model <- forecast(model)
library(forecast)
for.model <- forecast(model)
View(for.model)
plot(for.model)
# Aditivní, ne multiplikativní
# hledejte optimalni model pro radu ozonu v datech airquality v zavislosti na ostatnich promennych
data <- airquality
ccf(ts(airquality$Ozone),ts(airquality$Solar.R),na.action = na.pass)
View(airquality)
ccf(ts(airquality$Ozone),ts(airquality$Wind),na.action = na.pass)
ccf(ts(airquality$Ozone),ts(airquality$Temp),na.action = na.pass)
ccf(ts(airquality$Ozone),ts(airquality$Solar.R),na.action = na.pass)
ccf(ts(airquality$Ozone),ts(airquality$Wind),na.action = na.pass)
ccf(ts(airquality$Ozone),ts(airquality$Temp),na.action = na.pass)
result <- find_best_arima(rada)
print(result$best_spec)
print(result$best_model)
print(result$best_bic)
ccf(ts(airquality$Ozone),ts(airquality$Solar.R),na.action = na.pass)
ccf(ts(airquality$Ozone),ts(airquality$Wind),na.action = na.pass)
ccf(ts(airquality$Ozone),ts(airquality$Temp),na.action = na.pass)
arima <- find_best_arima(airquality)
print(result$best_spec)
arima <- auto.arima(airquality)
ts_data <- ts(airquality[, c("Ozone", "Temp")], frequency = 30)
arima <- auto.arima(ts_data)
############################
### prozkoumejme vzajemne vztahy mezi radami souboru airquality
# kroskorelacni funkce
ccf(ts(airquality$Wind),ts(airquality$Solar.R),na.action = na.pass)
# nejsou zavisle
ccf(ts(airquality$Wind),ts(airquality$Ozone),na.action = na.pass)
# generovani dat
set.seed(999)
x_series <- arima.sim(n = 200, list(order = c(1,0,0), ar = 0.7, sd=1))
# nasimulovany AR(1) proces
z <- ts.intersect(stats::lag(x_series, -1), stats::lag(x_series, -2))
# hodnoty rady x_series v case t a t-1
y_series <- 15 + 0.8*z[,1] + 1.5*z[,2] + rnorm(199,0,1)
# kombinace aktualni a zpozdene hodnoty + nahodne chyby
xy_series <- ts.intersect(y_series, z)
# model pomoci bezne linearni regrese
lm1 <- lm(xy_series[,1] ~ xy_series[,2] + xy_series[,3])
summary(lm1)
checkresiduals(lm1)
# model pomoci dynamickeho modelovani
dlm1 <- dynlm(y_series ~ L(x_series, 1) + L(x_series, 2))
library(dynlm)
############################
library(forecast)
library(dynlm)
library(lmtest)
# model pomoci dynamickeho modelovani
dlm1 <- dynlm(y_series ~ L(x_series, 1) + L(x_series, 2))
summary(dlm1)
### pouziti dynamickeho modelovani k odhaleni trendu a sezonnosti
plot(AirPassengers)
# multiplikativni rada, udelam z ni logaritmus
ap <- log(AirPassengers)
plot(ap)
# pridam zavislost na tretim pozorovani dozadu
set.seed(123)
ap_x <- 2 * stats::lag(ap, -3) + rnorm(length(ap), 0, 0.2)
# dynamicky linearni model
dlm2 <- dynlm(ap ~ trend(ap) + season(ap) + L(ap_x, 3))
summary(dlm2)
dlm2.o <- ts.intersect(ap, dlm2$fitted.values)
plot.ts(dlm2.o, plot.type = "single", col=c("orange","blue"),
lty=c(1,4), lwd=c(1,1),
main = "Dynamic Linear Model - Original (orange) and Fitted series (blue)")
dynlm(co2~trend(co2) + season(CO2))
dynlm(CO2~trend(CO2) + season(CO2))
co <- dynlm(CO2~trend(CO2) + season(CO2))
co <- dynlm(co2~trend(co2) + season(co2))
co
